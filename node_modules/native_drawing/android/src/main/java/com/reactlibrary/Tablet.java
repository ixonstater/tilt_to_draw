package com.reactlibrary;

import android.view.SurfaceView;
import android.view.SurfaceHolder;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Color;
import android.content.Context;
import android.content.pm.ActivityInfo;
import android.app.Activity;
import android.content.ContextWrapper;

public class Tablet extends SurfaceView{
  private SurfaceHolder holder;
  private Paint paint;
  public SimpleFloatVector pts;
  private Context ctx;
  private DrawingRunnable runnable;
  private Thread thread;

  public Tablet(Context context){
    super(context);
    this.ctx = context;
    this.paint = new Paint(Paint.ANTI_ALIAS_FLAG);
    this.paint.setColor(Color.RED);
    this.paint.setStrokeWidth(20);
    this.holder = getHolder();
    this.pts = new SimpleFloatVector(8000);
    this.pts.add(this.getWidth() / (float)2);
    this.pts.add(this.getHeight() / (float)2);
    this.runnable = new DrawingRunnable();
    this.thread = new Thread(this.runnable);
  }

  public void enterDrawLoop(){
    this.thread.start();
  }

  @Override
  protected void onAttachedToWindow(){
    super.onAttachedToWindow();
    Activity tempRef = (Activity)(((ContextWrapper)this.ctx).getBaseContext());
    tempRef.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
    this.setSystemUiVisibility(this.SYSTEM_UI_FLAG_IMMERSIVE | this.SYSTEM_UI_FLAG_HIDE_NAVIGATION | this.SYSTEM_UI_FLAG_FULLSCREEN);
  }

  @Override
  protected void onDetachedFromWindow(){
    super.onDetachedFromWindow();
    Activity tempRef = (Activity)(((ContextWrapper)this.ctx).getBaseContext());
    tempRef.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR);
    this.runnable.continueLoop = false;
  }

  class DrawingRunnable implements Runnable{
    public Tablet tablet;
    public Boolean continueLoop = true;
    @Override
    public void run(){
      this.tablet = Tablet.this;
      while(continueLoop){
        this.draw();
        try{
          Thread.sleep(17);
        }catch(InterruptedException e){

        }
      }
    }
    public void draw(){
      Canvas canvas = this.tablet.holder.lockCanvas();
      if(canvas != null){
        canvas.drawLines(this.tablet.pts.getArr(), this.tablet.paint);
        this.tablet.holder.unlockCanvasAndPost(canvas);
      }
    }
  }
}

class SimpleFloatVector{
  private float[] arr;
  private int originalCapacity;
  private int capacity;
  private int size = 0;

  public SimpleFloatVector(int capacity){
    this.capacity = capacity;
    this.originalCapacity = capacity;
    this.arr = new float[this.capacity];
  }

  public void add(float val){
    if(size == capacity){
      grow();
    }
    this.arr[size] = val;
    this.size++;
  }

  public synchronized float[] getArr(){
    return this.arr;
  }

  public void clearArr(){
    this.arr = new float[this.originalCapacity];
  }

  private void grow(){
    this.capacity *= 2;
    float[] temp = new float[this.capacity];
    for (int i = 0; i <= this.size - 1; i++){
      temp[i] = this.arr[i];
    }
  }
}