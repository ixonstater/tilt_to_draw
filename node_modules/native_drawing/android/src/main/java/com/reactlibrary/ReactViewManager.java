
package react.drawingmanager;

import com.reactlibrary.R;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.uimanager.SimpleViewManager;
import com.facebook.react.uimanager.ThemedReactContext;
import com.facebook.react.uimanager.annotations.ReactProp;
import android.view.SurfaceView;
import android.view.SurfaceHolder;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Color;
import android.content.Context;
import java.lang.Runnable;
import java.lang.Thread;
import java.util.ArrayList;
import react.debuglogmanager.Logger;
import react.debugtimer.MicroTimer;



public class ReactViewManager extends SimpleViewManager<Tablet>{

  public ThemedReactContext ctx;
  int pause = 1000;

  @Override
  public String getName(){
    return "NativeTablet";
  }
  @Override
  public Tablet createViewInstance(ThemedReactContext reactContext){
    this.ctx = reactContext;
    Tablet tablet = new Tablet(this.ctx);
    return tablet;
  }

  @ReactProp(name = "triggerdraw")
  public void drawNewCircle(Tablet tablet, ReadableArray coords){
    this.pause = coords.getInt(2);
    this.runCircleDrawLoop(tablet);
  }

  public void runCircleDrawLoop(Tablet tablet){
    TestRunnable runnable = new TestRunnable(tablet, this.pause);
    Thread thread = new Thread(runnable);
    thread.start();
  }
}

class TestRunnable implements Runnable{
  public float x;
  public float y;
  public int pause;
  public Tablet tablet;
  public TestRunnable(Tablet tablet, int pause){
    this.tablet = tablet;
    this.pause = pause;
  }
  @Override
  public void run(){
    while(true){
      tablet.draw(this.x, this.y);
      this.x += 5;
      this.y += 5;
      try{
        Thread.sleep(this.pause);
      }catch(InterruptedException e){

      }
    }
  }
}

class Tablet extends SurfaceView{
  private SurfaceHolder holder;
  private Paint paint;
  private SimpleFloatVector pts;

  public Tablet(Context context){
    super(context);
    this.paint = new Paint(Paint.ANTI_ALIAS_FLAG);
    this.paint.setColor(Color.RED);
    this.paint.setStrokeWidth(20);
    this.holder = getHolder();
    this.pts = new SimpleFloatVector(8000);
    this.pts.add(this.getWidth() / (float)2);
    this.pts.add(this.getHeight() / (float)2);
  }

  public void draw(float x, float y){
    Canvas canvas = this.holder.lockCanvas();
    if(canvas != null){
      this.pts.add(x);
      this.pts.add(y);
      canvas.drawLines(this.pts.getArr(), this.paint);
      holder.unlockCanvasAndPost(canvas);
      this.pts.add(x);
      this.pts.add(y);
    }
  }
}

class SimpleFloatVector{
  private float[] arr;
  private int originalCapacity;
  private int capacity;
  private int size = 0;

  public SimpleFloatVector(int capacity){
    this.capacity = capacity;
    this.originalCapacity = capacity;
    this.arr = new float[this.capacity];
  }

  public void add(float val){
    if(size == capacity){
      grow();
    }
    this.arr[size] = val;
    this.size++;
  }

  public float[] getArr(){
    return this.arr;
  }

  public void clearArr(){
    this.arr = new float[this.originalCapacity];
  }

  private void grow(){
    this.capacity *= 2;
    float[] temp = new float[this.capacity];
    for (int i = 0; i <= this.size - 1; i++){
      temp[i] = this.arr[i];
    }
  }
}