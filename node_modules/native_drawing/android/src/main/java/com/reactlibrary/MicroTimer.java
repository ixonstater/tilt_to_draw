package react.debugtimer;

import react.debuglogmanager.Logger;
import java.util.Arrays;

public class MicroTimer{
    public long[] times = new long[10];
    public long[] timeDifferences = new long[9];
    public int passedIters = 0;

    public void addTime(){
        if(passedIters < 10){
            times[passedIters] = System.nanoTime();
            passedIters++;
        } else {
            this.printTime();
        }
    }

    private void printTime(){
        for(long time: this.times){
            Logger.debugStatement("Time logged at: " + String.valueOf(time));
        }
        for(int i = 1; i < 10; i++){
            long timeDifference = this.times[i] - this.times[i - 1];
            Logger.debugStatement("Time spent from run " + String.valueOf(i-1) + " and " + String.valueOf(i) + ": " + String.valueOf(timeDifference));
            this.timeDifferences[i - 1] = timeDifference;
        }
        Logger.debugStatement("Average time per run: " + String.valueOf(this.findAverage()));
        Logger.debugStatement("Total time spent: " + String.valueOf(this.times[9] - this.times[0]));
        throw new NullPointerException("finished");
    }

    private long findAverage(){
        long avgTime = 0;
        long numRuns = 9;
        for (long timeDiff: this.timeDifferences){
            avgTime += timeDiff;
        }
        return avgTime / numRuns;
    }
}